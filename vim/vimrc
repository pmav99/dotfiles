" Modeline and notes {
" vim: set foldmarker={,} foldlevel=0 foldmethod=marker spell:
" }

set nocompatible               " Be iMproved

" functions {
    let s:cache_dir = '~/.vim/.cache'

    function! s:get_cache_dir(suffix) "{
        return resolve(expand(s:cache_dir . '/' . a:suffix))
    endfunction "}
" }

" { Leaders
    " We have to define the leaders before the plugins, because we want
    " to keep the plugin mappings in one place.
    let mapleader = ','
    let maplocalleader = '\\'
" }

" Plugins {

call plug#begin('~/.vim/plugged')

" Colorschemes {
    Plug 'altercation/vim-colors-solarized'
" }

" File finders/explorers {

    Plug 'Shougo/unite.vim' " {
        let g:unite_data_directory=s:get_cache_dir('unite')
        let g:unite_enable_start_insert=1
        let g:unite_source_history_yank_enable=1
        let g:unite_source_rec_max_cache_files=5000
        let g:unite_prompt='» '

        if executable('ag')
            let g:unite_source_grep_command='ag'
            let g:unite_source_grep_default_opts='--nocolor --line-numbers --nogroup -S -C4'
            let g:unite_source_grep_recursive_opt=''
        elseif executable('ack')
            let g:unite_source_grep_command='ack'
            let g:unite_source_grep_default_opts='--no-heading --no-color -C4'
            let g:unite_source_grep_recursive_opt=''
        endif

        function! s:unite_settings()
            nmap <buffer> Q <plug>(unite_exit)
            nmap <buffer> <esc> <plug>(unite_exit)
            imap <buffer> <esc> <plug>(unite_exit)
        endfunction
        autocmd FileType unite call s:unite_settings()

        " Unite Mappings
        "<space><space> go to anything (files, buffers, MRU, bookmarks)
        "<space>y select from previous yanks
        "<space>l select line from current buffer
        "<space>b select from current buffers
        "<space>o select from outline of current file
        "<space>s quick switch buffer
        "<space>/ recursively search all files for matching text (uses ag or ack if found)
        "
        nmap <space> [unite]
        nnoremap [unite] <nop>
        "if s:is_windows
            "nnoremap <silent> [unite]<space> :<C-u>Unite -toggle -auto-resize -buffer-name=mixed file_rec:! buffer file_mru bookmark<cr><c-u>
            "nnoremap <silent> [unite]f :<C-u>Unite -toggle -auto-resize -buffer-name=files file_rec:!<cr><c-u>
        "else
            "nnoremap <silent> [unite]<space> :<C-u>Unite -toggle -auto-resize -buffer-name=mixed file_rec/async:! buffer file_mru bookmark<cr><c-u>
            "nnoremap <silent> [unite]f :<C-u>Unite -toggle -auto-resize -buffer-name=files file_rec/async:!<cr><c-u>
        "endif
        nnoremap <silent> [unite]<space> :<C-u>Unite -toggle -auto-resize -buffer-name=mixed file_rec/async:! buffer file_mru bookmark<cr><c-u>
        nnoremap <silent> [unite]f :<C-u>Unite -toggle -auto-resize -buffer-name=files file_rec/async:!<cr><c-u>
        nnoremap <silent> [unite]e :<C-u>Unite -buffer-name=recent file_mru<cr>
        nnoremap <silent> [unite]y :<C-u>Unite -buffer-name=yanks history/yank<cr>
        nnoremap <silent> [unite]l :<C-u>Unite -auto-resize -buffer-name=line line<cr>
        nnoremap <silent> [unite]b :<C-u>Unite -auto-resize -buffer-name=buffers buffer<cr>
        nnoremap <silent> [unite]/ :<C-u>Unite -no-quit -buffer-name=search grep:.<cr>
        nnoremap <silent> [unite]m :<C-u>Unite -auto-resize -buffer-name=mappings mapping<cr>
        nnoremap <silent> [unite]s :<C-u>Unite -quick-match buffer<cr>
    " }

    Plug 'scrooloose/nerdtree',         { 'on': 'NERDTreeToggle' }
    " {

        " I like to open an explorer with Ctrl + E
        map <C-e> :NERDTreeToggle<CR>:NERDTreeMirror<CR>

        " Options
        let NERDTreeShowBookmarks=1
        let NERDTreeIgnore=['\.pyc', '\~$', '\.swo$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr']
        let NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$', '\~$']
        let NERDTreeChDirMode=2
        let NERDTreeQuitOnOpen=1
        let NERDTreeShowHidden=1
        let NERDTreeKeepTreeInNewTab=1
    " }
" }

" Syntax + Code completion + Static checkers {
    Plug 'Valloric/YouCompleteMe'
    "Plug 'davidhalter/jedi-vim' " {
        "let g:jedi#auto_initialization = 1
    "" }
    "
    Plug 'scrooloose/syntastic' " {
        " Change default symbols
        let g:syntastic_error_symbol = '✗'
        let g:syntastic_warning_symbol = '±'
        let g:syntastic_style_error_symbol = '§'
        let g:syntastic_style_warning_symbol = '~'
        "
        "If enabled, syntastic will do syntax checks when buffers are first loaded as
        "well as on saving >
        let g:syntastic_check_on_open = 1
        "
        "When set to 2 the cursor will jump to the first issue detected, but only if
        "this issue is an error. >
        let g:syntastic_auto_jump = 0
        "
        " Define python checkers

        "let g:syntastic_aggregate_errors = 1
        let g:syntastic_python_checkers = ['pyflakes', ]
        let g:syntastic_python_checkers = ['pep257', 'pylint', 'pep8', 'flake8', 'pyflakes', ]
        let g:syntastic_python_checkers = ['flake8']
        let g:syntastic_javascript_checkers = ['jshint',]
        "
        "Enable this option to tell syntastic to always stick any detected errors into
        "the |location-list|: >
        let g:syntastic_always_populate_loc_list = 1
        "let g:syntastic_auto_loc_list = 1
        let g:syntastic_stl_format = '[%E{Err : %fe #%e}%B{, }%W{Warn: %fw #%w}]'

        "let g:syntastic_quiet_messages = { "level": "warnings" }

    " }
" }

" Comments {
    Plug 'scrooloose/nerdcommenter'
    "Plug 'tomtom/tcomment_vim'
    "Plug 'tpope/vim-commentary'
    "
" }

" Status line {
    "Plug 'Lokaltog/powerline'
    Plug 'bling/vim-airline'       " So much faster than Powerline! :)
" }

" Undo {
    "Plug 'sjl/gundo.vim'
    Plug 'mbbill/undotree' " {
        nnoremap <F5> :UndotreeToggle<cr>
    " }
" }

" Language Specifics {
    Plug 'bserem/vim-greek-spell'

    "Plug 'docker/docker',               { 'for': ['Dockerfile', 'dockerfile', 'docker'], 'rtp': '/contrib/syntax/vim/', }
    Plug 'ekalinin/Dockerfile.vim',     { 'for': ['Dockerfile', 'dockerfile', 'docker'] }
    Plug 'plasticboy/vim-markdown',     { 'for': 'md' }
    Plug 'elzr/vim-json',               { 'for': 'json' }
    Plug 'icook/Vim-Jinja2-Syntax',     { 'for': ['jinja'] }
    Plug 'Rykka/riv.vim',               { 'for': 'rst' }
    Plug 'octol/vim-cpp-enhanced-highlight', { 'for': ['c', 'c++' ] }

    " yaml {
        Plug 'stephpy/vim-yaml/',           { 'for': [ 'yaml', 'yml' ] }
        Plug 'chase/vim-ansible-yaml',      { 'for': [ 'yaml', 'yml' ] }
        Plug 'pearofducks/ansible-vim',     { 'for': [ 'yaml', 'yml' ] }
    " }

    " Python specifics {
        "Plug 'jmcantrell/vim-virtualenv',       {'for': 'python'}
        Plug 'tmhedberg/SimpylFold',            {'for': 'python'}
        Plug 'hynek/vim-python-pep8-indent',    {'for': 'python'}
        Plug 'hdima/python-syntax',             {'for': 'python'}

        let python_highlight_all = 1

    " }
    "
    " Scala {
        Plug 'derekwyatt/vim-scala',            {'for': 'scala' }
        "Plug 'ensime/ensime-vim',               {'for': 'scala' }

        "au FileType scala nnoremap <localleader>df :EnDeclaration<CR>
        "au FileType scala nnoremap <localleader>dfs :EnDeclarationSplit<CR>
        "au FileType scala nnoremap <localleader>dfv :EnDeclarationSplit v<CR>
        "au FileType scala nnoremap <localleader>dd :EnDocBrowse<CR>
    " }

    " Javascript specifics {
        Plug 'pangloss/vim-javascript',             {'for': 'javascript'}
        Plug 'jelera/vim-javascript-syntax',        {'for': 'javascript'}
        Plug 'wookiehangover/jshint.vim',           {'for': 'javascript'}
    " }

    " HTML/XML/CSS/LESS specific {
        Plug 'mattn/emmet-vim/',            { 'for': ['html', 'xml'] }
        Plug 'groenewege/vim-less',         { 'for': 'less'}
        Plug 'ap/vim-css-color',            { 'for': ['css', 'less'] }
        Plug 'othree/xml.vim',              { 'for': 'xml' }
        Plug 'othree/html5.vim',            { 'for': 'html' }
        Plug 'Valloric/MatchTagAlways',     { 'for': ['html', 'xml'] }
    " }

    " Indentation {
    Plug 'nathanaelkane/vim-indent-guides'
    " }

" }

call plug#end()

" }

" general {
    filetype plugin indent on   " automatically detect file types.
    syntax on                   " syntax highlighting
    set mouse-=a                " automatically disable mouse usage
    scriptencoding utf-8
    set encoding=utf-8
    set modelines=2
    set laststatus=2            " always show a status line
    set showmode                " display the current mode
    set showcmd                 " show partial commands in status line and
    set visualbell
    set ttyfast
    set ruler                   " show the ruler
    set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%)
    set backspace=indent,eol,start  " backspace for dummies
    set history=1000            " Store a ton of history (default is 20)
    set shell=/bin/zsh
    set fillchars=diff:⣿,vert:│
    set autowrite               " Autosave files
    set title
    set guioptions-=m              " Do not load menu
    set guioptions-=T              " Do not load toolbar
" }

" Basic stuff {

    " Swap ; and :  Convenient.
    " Saves typing and eliminates :W style typos due to lazy holding shift.
    nnoremap ; :

    " Save file (works in greek layout too!)
    inoremap <leader>w <c-o>:w<CR>
    inoremap <leader>ς <c-o>:w<CR>
    nnoremap <leader>w :w
    nnoremap <leader>ς :w
    vnoremap <leader>w <esc>:w<CR>gv
    vnoremap <leader>ς <esc>:w<CR>gv

    " map F1 (help) to esc
    inoremap <F1> <ESC>
    nnoremap <F1> <ESC>
    vnoremap <F1> <ESC>

    " When vimrc is edited, reload it
    "autocmd! bufwritepost vimrc source ~/.vim/vimrc
" }

" Fonts & Theme {
    " Font {
        " Choose font for linux, mac and windows.
        if has("gui_gtk2")
            set guifont=Ubuntu\ Mono\ 10

        elseif has("gui_win32")
            set guifont=Consolas:h10
        end
    " }

    " Theme {
        set t_Co=256

        " Solarized {
            " General options
            let g:solarized_termcolors=256      " 16|256 terminal colors
            let g:solarized_termtrans=0         " 0|1 terminal transparency
            let g:solarized_degrade=0           " 0|1 for testing
            let g:solarized_bold=1              " 0|1 stop solarized from displaying bold
            let g:solarized_underline=1         " 0|1 stop solarized from displaying underline
            let g:solarized_italic=1            " 0|1 stop solarized from displaying italic
            let g:solarized_contrast="high"     " low|normal|high set contrast
            let g:solarized_visibility="low"    " low|normal|high set visibility

            " Choose theme
            colorscheme solarized               " load colorscheme

            " Choose background for gvim and vim.
            if has('gui_running')
                set background=light
            else
                set background=light
            endif
        " }
    " }
" }

" Scrolling and Folding {
    set scrolljump=5                " lines to scroll when cursor leaves screen
    set scrolloff=5                 " minimum lines to keep above and below cursor
    set foldenable                  " auto fold code
    set foldlevelstart=1
    set foldmethod=indent

    " Javascript specific
    let javaScript_fold=1         " JavaScript
    autocmd FileType javascript setlocal foldmethod=syntax
    autocmd FileType html setlocal foldmethod=indent

    """ Code folding options
    nnoremap <leader>f0 :set foldlevel=0<CR>
    nnoremap <leader>f1 :set foldlevel=1<CR>
    nnoremap <leader>f2 :set foldlevel=2<CR>
    nnoremap <leader>f3 :set foldlevel=3<CR>
    nnoremap <leader>f4 :set foldlevel=4<CR>
    nnoremap <leader>f5 :set foldlevel=5<CR>
    nnoremap <leader>f6 :set foldlevel=6<CR>
    nnoremap <leader>f7 :set foldlevel=7<CR>
    nnoremap <leader>f8 :set foldlevel=8<CR>
    nnoremap <leader>f9 :set foldlevel=99<CR>

    nnoremap <leader>φ0 :set foldlevel=0<CR>
    nnoremap <leader>φ1 :set foldlevel=1<CR>
    nnoremap <leader>φ2 :set foldlevel=2<CR>
    nnoremap <leader>φ3 :set foldlevel=3<CR>
    nnoremap <leader>φ4 :set foldlevel=4<CR>
    nnoremap <leader>φ5 :set foldlevel=5<CR>
    nnoremap <leader>φ6 :set foldlevel=6<CR>
    nnoremap <leader>φ7 :set foldlevel=7<CR>
    nnoremap <leader>φ8 :set foldlevel=8<CR>
    nnoremap <leader>φ9 :set foldlevel=99<CR>
" }

" Line Numbers {
    set number                  " Line numbers on
    set relativenumber          " Relative line numbers on

    " Use relative numbers only focus is on the vim window.
    autocmd FocusLost * :set number
    autocmd FocusGained * :set relativenumber

    " Use relative numbers only when in normal mode
    autocmd InsertEnter * :set number
    autocmd InsertLeave * :set relativenumber

" }

" Windows and Buffers {
    set hidden                  " allow buffer switching without saving
    set winminheight=0         " windows can be 2 line high
    set splitbelow              " When splitting put new window below of the current one
    set splitright              " When splitting put new window to the right of the current one
    au VimResized * :wincmd =   " Resize splits when the windows is resized.
    au FocusLost * : silent! wall " Save when losing focus

    " Redraw screen
    nnoremap <leader>u :syntax sync fromstart<cr>:redraw!<cr>

    " Make new buffers to default to markdown
    autocmd BufEnter * if &filetype == "" | setlocal ft=txt | endif

    " Reset the filetype when you saveas
    autocmd BufFilePre * set filetype&


    " Moving around {
        " Easier moving in tabs and windows
        nnoremap <C-J> <C-W>j<C-W>_
        nnoremap <C-K> <C-W>k<C-W>_
        nnoremap <C-L> <C-W>l<C-W>_
        nnoremap <C-H> <C-W>h<C-W>_

        nnoremap <Leader>= <C-w>=        " Adjust viewports to the same size
    " }
" }

" Whitespace {
    " Highlight problematic whitespace with the following symbols,
    " but only show trailing whitespace when not in insert mode.
    set list
    set listchars=tab:▸\
    set listchars+=extends:❯
    set listchars+=precedes:❮
    "set listchars+=eol:¬
    augroup trailing
        au!
        au InsertEnter * :set listchars-=trail:⌴
        au InsertLeave * :set listchars+=trail:⌴
    augroup END

    " Remove trailing whitespaces when saving
    autocmd BufWritePre * :%s/\s\+$//e
    "autocmd FileType c,cpp,java,php,javascript,python,twig,xml,yml autocmd BufWritePre <buffer> :%s/\s\+$//e

    " Insert empty line above or below while staying in normal mode
    nnoremap <leader>o :set paste<CR>m`o<Esc>``:set nopaste<CR>
    nnoremap <leader>O :set paste<CR>m`O<Esc>``:set nopaste<CR>
" }

" Languages & Spellchecking {
    " Greek {
        " Use Greek letters in command mode
        :set langmap=ΑA,ΒB,ΨC,ΔD,ΕE,ΦF,ΓG,ΗH,ΙI,ΞJ,ΚK,ΛL,ΜM,ΝN,ΟO,ΠP,QQ,ΡR,ΣS,ΤT,ΘU,ΩV,WW,ΧX,ΥY,ΖZ,αa,βb,ψc,δd,εe,φf,γg,ηh,ιi,ξj,κk,λl,μm,νn,οo,πp,qq,ρr,σs,τt,θu,ωv,ςw,χx,υy,ζz
    " }


    if version >= 700
        set spell spelllang=en,el
    endif
" }

" Syntax Highlighting {
    set synmaxcol=250           " Don't try to highlight lines longer than 120 chars.
    autocmd BufRead,BufNewFile *.conf setf dosini
" }

" TimeOuts {
    " Time out on key codes but not mappings.
    " Basically this makes terminal Vim work sanely.
    set notimeout
    set ttimeout
    set ttimeoutlen=10
" }

" Moving around {
    " When moving stay in the middle of the window.
    nnoremap g; g;zz
    nnoremap g, g,zz
    nnoremap <c-o> <c-o>zz

    " It's 2012.
    noremap j gj
    noremap k gk
    noremap gj j
    noremap gk k

" }

" highlight and searching {
    set incsearch                   " incremental search
    set hlsearch                    " highlight search terms
    set ignorecase                  " case insensitive search
    set smartcase                   " case sensitive when uc present

    " use sane regexes.
    "nnoremap / /\v
    "vnoremap / /\v

    " matching pairs
    set showmatch                   " show matching symbols (parens etc)
    set matchtime=3                 " time to show matching paren
    set matchpairs+=(:)
    set matchpairs+=[:]
    set matchpairs+={:}
    set matchpairs+=<:>

    " clear highlighted search
    nnoremap <silent> <leader>/ :nohlsearch<cr>

    " keep search matches in the middle of the window.
    nnoremap n nzzzv
    nnoremap n nzzzv
" }

" Tabs, spaces, wrapping {
    set tabstop=8                   " an indentation every eight columns
    set shiftwidth=4                " use indents of 4 spaces
    set shiftround                  " Always round to multiple of 'shiftwidth'
    set softtabstop=4               " let backspace delete indent
    set expandtab                   " tabs are spaces, not tabs
    set formatoptions=qrn1
    set colorcolumn=100
    set autoindent                  " indent at the same level of the previous line

    " Use two spaces in html, javascript, css files
    autocmd FileType yml,yaml,json,javascript,css,xml,html,jinja,xhtml,htmldjango :setlocal sw=2 ts=2 sts=2

    " Do not expand tabs for makefiles
    autocmd FileType make :setlocal noexpandtab


    " Wrap {
        set nowrap                      " Wrap long lines (or not!)
        set whichwrap=b,s,h,l,<,>,[,]   " backspace and cursor keys wrap to
        set textwidth=100
        " Wrapped lines goes down/up to next row, rather than next line in file.
        nnoremap j gj
        nnoremap k gk

        " Formatting, TextMate-style
        nnoremap Q gqip
        vnoremap Q gq

        " Keep the cursor in place while joining lines
        nnoremap J mzJ`z

        "Split line (sister of [J]oin lines)
        " The normal use of S is covered by cc, so don't worry about shadowing
        nnoremap S i<cr><esc>^mwgk:silent! s/\v +$//<cr>:noh<cr>`w
    " }
" }

" Backup - Undo - Swap{
    " Undo {
        set undodir=~/.vim/tmp/undo//     " undo files
        if has('persistent_undo')
            set undofile                "so is persistent undo ...
            set undolevels=1000         "maximum number of changes that can be undone
            set undoreload=10000        "maximum number lines to save for undo on a buffer reload
        endif
    " }

    " Backup {
        set backupdir=~/.vim/tmp/backup// " backups
        set backup                        " enable backups
    " }

    " Swap {
        set directory=~/.vim/tmp/swap//   " swap files
        set noswapfile                    " It's 2012, Vim.
    " }
" }

" Completion {
    " WildMenu Completion {
        set wildmenu                    " show list instead of just completing
        set wildmode=list:longest,full  " command <Tab> completion, list matches, then longest common part, then all.

        set wildignore+=.hg,.git,.svn                    " Version control
        set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
        set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
        set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
        set wildignore+=*.spl                            " compiled spelling word lists
        set wildignore+=*.sw?                            " Vim swap files
        set wildignore+=migrations                       " Django migrations
        set wildignore+=*.pyc,*.pyo                      " Python byte code
        set wildignore+=*.orig                           " Merge resolution files
    " }
" }

" Misc {
    " Clipboard {
        noremap <leader>y "*y
        noremap <leader>p :set paste<CR>"*p<CR>:set nopaste<CR>
        noremap <leader>P :set paste<CR>"*P<CR>:set nopaste<CR>
        vnoremap <leader>y "*ygv

        " Yank from the cursor to the end of the line, to be consistent with C and D.
        nnoremap Y y$
    " }

    " CursorLine {
        " Only show cursorline in the current window and in normal mode.
        augroup cline
            au!
            au WinLeave * set nocursorline
            au WinEnter * set cursorline
            au InsertEnter * set nocursorline
            au InsertLeave * set cursorline
        augroup END
    " }

    " Make Vim able to edit crontab files again.
    set backupskip=/tmp/*,/private/tmp/*"

    " Make sure Vim returns to the same line when you reopen a file.
    augroup line_return
        au!
        au BufReadPost *
            \ if line("'\"") > 0 && line("'\"") <= line("$") |
            \     execute 'normal! g`"zvzz' |
            \ endif
    augroup END

    " visual shifting (does not exit Visual mode)
    vnoremap < <gv
    vnoremap > >gv

    " For when you forget to sudo.. Really Write the file.
    cmap w!! w !sudo tee % >/dev/null

    " Stupid shift key fixes
    "cmap W w
    "cmap WQ wq
    "cmap wQ wq

    " Change Working Directory to that of the current file
    cmap cwd lcd %:p:h

    " Some helpers to edit mode : http://vimcasts.org/e/14
    " %% : Expands directory of the current file to the command line
    cnoremap %% <C-R>=expand('%:h').'/'<cr>

    " The following commands open a file in the same directory as the currently
    " edited file.
    " 'w' opens it in a new window.
    " 's' opens it in a new split.
    " 'v' opens it in a new vertical split.
    nnoremap <leader>ew :e %%
    nnoremap <leader>es :sp %%
    nnoremap <leader>ev :vsp %%
" }

 " Functions {

    function! InitializeDirectories()
        let separator = "."
        let parent = $HOME
        let prefix = '.vim'
        let dir_list = {
                    \ 'backup': 'backupdir',
                    \ 'views': 'viewdir',
                    \ 'swap': 'directory' }

        if has('persistent_undo')
            let dir_list['undo'] = 'undodir'
        endif

        for [dirname, settingname] in items(dir_list)
            let directory = parent . '/' . prefix . dirname . "/"
            if exists("*mkdir")
                if !isdirectory(directory)
                    call mkdir(directory)
                endif
            endif
            if !isdirectory(directory)
                echo "Warning: Unable to create backup directory: " . directory
                echo "Try: mkdir -p " . directory
            else
                let directory = substitute(directory, " ", "\\\\ ", "g")
                exec "set " . settingname . "=" . directory
            endif
        endfor
    endfunction

call InitializeDirectories()

    function! NERDTreeInitAsNeeded()
        redir => bufoutput
        buffers!
        redir END
        let idx = stridx(bufoutput, "NERD_tree")
        if idx > -1
            NERDTreeMirror
            NERDTreeFind
            wincmd l
        endif
    endfunction

call NERDTreeInitAsNeeded()
" }

"" LaTeX {
"    let g:Tex_DefaultTargetFormat='pdf'
"    let g:Tex_ViewRule_pdf='evince'
"    let g:Tex_CompileRule_pdf = 'xelatex -interaction=nonstopmode $*'
"" }

